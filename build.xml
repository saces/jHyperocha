<?xml version="1.0"?>
<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
<!-- Build file for hyperocha                                          -->
<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
<project name="hyperocha" default="main" basedir=".">

	<!-- Give user a chance to override without editing this file
		(and without typing -D each time it compiles it) -->
	<property file="build.properties" />

	<!-- Prefix of the name of the distribution files to create -->
	<property name="distZipNamePrefix" value="hyperocha-" />
	<property name="distJarNamePrefix" value="hyperocha-" />
	<property name="distSourceZipNamePrefix" value="hyperocha-source-" />

	<!-- Don't use systems CLASSPATH, use only the CLASSPATH set in this build file -->
	<property name="build.sysclasspath" value="ignore" />

	<!--  General project properties -->
	<property name="Name" value="hyperocha" />
	<property name="jarName" value="hyperocha" />

	<!--  javac compiler options -->
	<property name="debug" value="true" />
	<property name="debuglevel" value="source,lines,vars" />
	<property name="deprecation" value="true" />
	<property name="verbose" value="false" />
	<property name="optimize" value="true" />
	<property name="source" value="1.5" />
	<property name="target" value="1.5" />

	<!--  Set the properties related to the source tree -->
	<property name="src.dir" value="src/" />
	<property name="src.dir.utils" value="jHyperocha-utils/src" />
	<property name="src.dir.base" value="jHyperocha-base/src" />
	<property name="src.dir.protocol" value="jHyperocha-protocol/src" />
	<property name="src.dir.ant" value="jHyperocha-ant/src" />
	<property name="src.dir.demos" value="jHyperocha-demos/src" />

	<!--  Set the properties for the build area  -->
	<property name="build.dir" value="build" />

	<!--  Set up properties for the distribution area -->
	<property name="dist.dir" value="dist" />

	<!--  Set up properties for the javadoc -->
	<property name="apidocs" value="apidocs" />

	<!--  The CLASSPATH to use for compilation. -->
	<path id="classpath">
		<pathelement location="${build.classes.hyperocha}" />
	</path>

	<!--  Specify logfile name -->
	<property name="logfilename" value="build.log" />

	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<!--  Output some messages and set DATE,TIME variables                 -->
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<target name="startmsg" description="--> outputs message">

		<tstamp />
		<echo>Starting build of ${Name}
Date       : ${DSTAMP}
Time       : ${TSTAMP}
JVM version: ${java.version} of '${java.vendor}' in '${java.home}'
Ant project: ${ant.project.name}
Ant version: ${ant.version}
Build OS   : ${os.name} ${os.version} (${os.arch})
Build user : ${user.name}
Build log  : ${logfilename}</echo>

	</target>

	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<!--  Build the code  -->
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<target name="build" depends="startmsg" description="--> compiles the source code">
		<mkdir dir="${build.dir}" />
		<javac srcdir="${src.dir.utils}" destdir="${build.dir}" encoding="UTF8" classpath="${src.dir}" debug="${debug}" debuglevel="${debuglevel}" deprecation="${deprecation}" verbose="${verbose}" optimize="${optimize}" source="${source}" target="${target}" />
		<javac srcdir="${src.dir.base}" destdir="${build.dir}" encoding="UTF8" classpath="${src.dir}" debug="${debug}" debuglevel="${debuglevel}" deprecation="${deprecation}" verbose="${verbose}" optimize="${optimize}" source="${source}" target="${target}" />
		<javac srcdir="${src.dir.protocol}" destdir="${build.dir}" encoding="UTF8" classpath="${src.dir}" debug="${debug}" debuglevel="${debuglevel}" deprecation="${deprecation}" verbose="${verbose}" optimize="${optimize}" source="${source}" target="${target}" />
		<javac srcdir="${src.dir.ant}" destdir="${build.dir}" encoding="UTF8" classpath="${src.dir}" debug="${debug}" debuglevel="${debuglevel}" deprecation="${deprecation}" verbose="${verbose}" optimize="${optimize}" source="${source}" target="${target}" >
			<classpath>
				<pathelement location="${ant.core.lib}"/>
			</classpath>
		</javac>
		<javac srcdir="${src.dir.demos}" destdir="${build.dir}" encoding="UTF8" classpath="${src.dir}" debug="${debug}" debuglevel="${debuglevel}" deprecation="${deprecation}" verbose="${verbose}" optimize="${optimize}" source="${source}" target="${target}" />
	</target>

	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<!--  Create the jar file  -->
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<target name="jar" depends="build" description="--> creates the jar file">

		<delete quiet="true" file="${dist.dir}/${jarName}" />
		<mkdir dir="${dist.dir}" />

		<!--  Build the jar file.  -->
		<jar jarfile="${dist.dir}/${jarName}.jar">
			<manifest>
				<attribute name="Class-Path" value=". hyperocha.jar" />
				<attribute name="Main-Class" value="hyperocha.freenet.samples.SampleChooser" />
				<attribute name="Specification-Version" value="${revision}" />
			</manifest>
			<fileset dir="${build.dir}">
				<include name="**/*.class" />
			</fileset>
		</jar>
	</target>

	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<!-- Prepare the distribution (zip, source zip and jar)				 -->
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<target name="distro" depends="jar" description="--> prepares the distribution.">

		<!-- Prepares the zip -->

		<!-- copy todir="${dist.dir}/lib">
        <fileset dir="${lib.dir}">
            <include name="*.jar"/>
            <exclude name="jnlp.jar"/>
        </fileset>
    </copy>

    <mkdir dir="${dist.dir}/downloads"/>
    <mkdir dir="${dist.dir}/exec"/ -->

		<!-- create the help-zip -->

	</target>

	<target name="release" depends="main" description="--> prepares .jar and source.zip for release">
		<echo>Preparing files for release..
	</echo>

		<mkdir dir="${release.dir}" />
		<delete quiet="true" file="${release.dir}/${distZipNamePrefix}${revision}.zip" />
		<zip basedir="${dist.dir}" destfile="${release.dir}/${distZipNamePrefix}${revision}.zip" />
		<!--
    <copy todir="${release.dir}">
      <fileset dir="${dist.dir}">
      	<filename name="${jarName}"/>
      </fileset>
   </copy>

    <delete quiet="true" file="${release.dir}/${distJarNamePrefix}${NOW.DATE}.jar"/>
    <delete quiet="true" file="${release.dir}/${distJarNamePrefix}latest.jar"/>

    <move file="${release.dir}/${jarName}" tofile="${release.dir}/${distJarNamePrefix}${NOW.DATE}.jar"/>

    <copy todir="${release.dir}">
          <fileset dir="${dist.dir}">
	          <filename name="${jarName}"/>
	</fileset>
   </copy>
   <move file="${release.dir}/${jarName}" tofile="${release.dir}/${distJarNamePrefix}latest.jar"/>
-->

		<!-- Prepares the source zip (exclude the library jars) -->

		<delete quiet="true" file="${release.dir}/${distZipNamePrefix}${revision}-source.zip" />
		<zip destfile="${release.dir}/${distZipNamePrefix}${revision}-source.zip" filesonly="true">
			<zipfileset dir="." prefix="hyperocha" excludes=".* **/CVS/* ${lib.dir}/**/*.jar" includes="${src.dir}/**/* ${bin.dir}/**/* ${res.dir}/**/*
    						  ${lib.dir}/**/* ${specs.dir}/**/* ${helpsrc.dir}/**/*
                              build.xml" />
		</zip>

		<echo>
	Source, zip and jar ready for release at ${release.dir}</echo>
	</target>

	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<!-- Clean -->
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<target name="clean" description="--> clean the build files.">
		<!-- delete quiet="true" dir="${build.dir}"/ -->
		<delete dir="${build.dir}" />
		<delete dir="${lib.dir}" />
		<delete dir="${dist.dir}" />
		<delete dir="docs" />
	</target>

	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<!-- Building help.zip -->
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<target name="helpzip" description="--> build the help.zip">
		<delete quiet="true" file="${helpbin.dir}/help.zip" />
		<mkdir dir="${helpbin.dir}" />
		<zip destfile="${helpbin.dir}/help.zip">
			<zipfileset dir="${helpsrc.dir}" excludes="/**/CVS/*" />
		</zip>
	</target>

	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<!-- Building the hyperocha documentation -->
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->

	<target name="hyperochadoc">
		<javadoc packagenames="hyperocha.*" sourcepath="${src.dir}" destdir="${apidocs}" windowtitle="jHyperocha Documentation" >
			<!-- fileset dir="${src.dir}" / -->
			<fileset dir="${src.dir.utils}" />
			<fileset dir="${src.dir.base}" />
			<fileset dir="${src.dir.protocol}" />
			<fileset dir="${src.dir.ant}" />
			<fileset dir="${src.dir.demos}" />
		</javadoc>
	</target>

	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<!-- Main target - runs dist by default -->
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<target name="main" description="--> creates the distribution in ./dist">

		<!-- record name="${logfilename}" action="start" / -->

		<tstamp>
			<format property="NOW.DATE" pattern="dd-MMM-yyyy" locale="en" />
			<format property="NOW.TIME" pattern="HH:mm:ss" locale="en" />
			<format property="NOW.NOW" pattern="yyyyMMddHHmm" locale="en" />
		</tstamp>
		<property name="revision" value="${NOW.NOW}" />
		<!-- overwritten by atomative -->

		<antcall target="distro" />

		<echo>Finished build of ${Name}
			Date : ${NOW.DATE}
			Time : ${NOW.TIME}</echo>

		<!-- record name="${logfilename}" action="stop" / -->

	</target>

	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<!-- distro targets -->
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->

	<target name="make-distro-zip">
		<mkdir dir="${dist.dir}" />
		<zip destfile="${dist.dir}/jHyperocha.zip" filesonly="true" compress="true">
			<zipfileset dir="." prefix="" excludes=".*" includes="src/**/* samples/**/* 
	    	  		  		                 build.xml build_binary.xml" />
		</zip>
	</target>

	<target name="make-source-zip">
		<mkdir dir="${dist.dir}" />
		<zip destfile="${dist.dir}/jHyperocha-src.zip" filesonly="true" compress="true">
			<zipfileset dir="." prefix="" excludes=".*" includes="src/**/* samples/**/* 
    	  		  		                 build.xml build_binary.xml" />
		</zip>
	</target>

</project>
